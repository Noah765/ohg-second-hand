generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Offers {
  id          String                   @id @default(uuid())
  created_at  DateTime                 @default(now())
  hidden      Boolean
  creator_id  String
  creator     AuthUser                 @relation(references: [id], fields: [creator_id], onDelete: Cascade)
  title       String
  images      String[]
  description String?
  category    Int
  price       Float?
  price_type  Boolean?
  ts          Unsupported("tsvector")? // Filled with data via db trigger
  bookmarks   Bookmarks[]
  chats       Chats[]

  @@index([ts], type: Gin)
  @@map("offers")
}

model Bookmarks {
  id       Int      @id @default(autoincrement())
  user_id  String
  offer_id String
  user     AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)
  offer    Offers   @relation(references: [id], fields: [offer_id], onDelete: Cascade)

  @@map("bookmarks")
}

model Chats {
  id       Int        @id @default(autoincrement())
  user_id  String
  offer_id String
  user     AuthUser   @relation(references: [id], fields: [user_id], onDelete: Cascade)
  offer    Offers     @relation(references: [id], fields: [offer_id], onDelete: Cascade)
  messages Messages[]

  @@map("chats")
}

model Messages {
  id         Int      @id @default(autoincrement())
  chat_id    Int
  created_at DateTime @default(now())
  is_creator Boolean
  message    String
  chat       Chats    @relation(references: [id], fields: [chat_id], onDelete: Cascade)

  @@map("messages")
}

model AuthUser {
  id             String        @id
  auth_session   AuthSession[]
  auth_key       AuthKey[]
  name           String        @unique
  email          String        @unique
  email_verified Boolean
  offers         Offers[]
  bookmarks      Bookmarks[]
  chats          Chats[]

  @@map("users")
}

model AuthSession {
  id             String   @id
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("sessions")
}

model AuthKey {
  id              String   @id
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("keys")
}
